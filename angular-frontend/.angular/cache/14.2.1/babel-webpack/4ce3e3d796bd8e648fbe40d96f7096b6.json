{"ast":null,"code":"import { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nconst defaultParams = {\n  params: {\n    enterAnimationDuration: '150ms',\n    exitAnimationDuration: '75ms'\n  }\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', group([animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), defaultParams), transition('* => void, * => exit', group([animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), defaultParams)])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nclass MatDialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Custom class for the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Custom class for the backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n    this.maxWidth = '80vw';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n\n    this.ariaLabel = null;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n\n    this.autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /** Whether to wait for the opening animation to finish before trapping focus. */\n\n    this.delayFocusTrap = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true;\n    /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n\n    this.enterAnimationDuration = defaultParams.params.enterAnimationDuration;\n    /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n\n    this.exitAnimationDuration = defaultParams.params.exitAnimationDuration; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\n\n\nclass _MatDialogContainerBase extends CdkDialogContainer {\n  constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n    super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n    /** Emits when an animation state changes. */\n\n    this._animationStateChanged = new EventEmitter();\n  }\n\n  _captureInitialFocus() {\n    if (!this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Callback for when the open dialog animation has finished. Intended to\n   * be called by sub-classes that use different animation implementations.\n   */\n\n\n  _openAnimationDone(totalTime) {\n    if (this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.next({\n      state: 'opened',\n      totalTime\n    });\n  }\n\n}\n\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n  return new (t || _MatDialogContainerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\n_MatDialogContainerBase.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _MatDialogContainerBase,\n  selectors: [[\"ng-component\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function _MatDialogContainerBase_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nclass MatDialogContainer extends _MatDialogContainerBase {\n  constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n    super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n    this._changeDetectorRef = _changeDetectorRef;\n    /** State of the dialog animation. */\n\n    this._state = 'enter';\n  }\n  /** Callback, invoked whenever an animation on the host completes. */\n\n\n  _onAnimationDone({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._openAnimationDone(totalTime);\n    } else if (toState === 'exit') {\n      this._animationStateChanged.next({\n        state: 'closed',\n        totalTime\n      });\n    }\n  }\n  /** Callback, invoked when an animation on the host starts. */\n\n\n  _onAnimationStart({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._animationStateChanged.next({\n        state: 'opening',\n        totalTime\n      });\n    } else if (toState === 'exit' || toState === 'void') {\n      this._animationStateChanged.next({\n        state: 'closing',\n        totalTime\n      });\n    }\n  }\n  /** Starts the dialog exit animation. */\n\n\n  _startExitAnimation() {\n    this._state = 'exit'; // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAnimationState() {\n    return {\n      value: this._state,\n      params: {\n        'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n        'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration\n      }\n    };\n  }\n\n}\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return new (t || MatDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\nMatDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-dialog-container\"],\n  hostVars: 7,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._config.id);\n      i0.ɵɵattribute(\"aria-modal\", ctx._config.ariaModal)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      i0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._getAnimationState());\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [i4.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[id]': '_config.id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': `_getAnimationState()`,\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\n\nclass MatDialogRef {\n  constructor(_ref, config, _containerInstance) {\n    this._ref = _ref;\n    this._containerInstance = _containerInstance;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* MatDialogState.OPEN */\n    ;\n    this.disableClose = config.disableClose;\n    this.id = _ref.id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n\n      this._finishDialogClose();\n    });\n\n    _ref.overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._finishDialogClose();\n    });\n\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n      if (!this.disableClose) {\n        event.preventDefault();\n\n        _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._ref.overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n\n    this._state = 1\n    /* MatDialogState.CLOSING */\n    ;\n\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n\n\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n\n\n  afterClosed() {\n    return this._ref.closed;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n\n\n  backdropClick() {\n    return this._ref.backdropClick;\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n\n\n  keydownEvents() {\n    return this._ref.keydownEvents;\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n\n\n  updatePosition(position) {\n    let strategy = this._ref.config.positionStrategy;\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._ref.updatePosition();\n\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this._ref.updateSize(width, height);\n\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this._ref.addPanelClass(classes);\n\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this._ref.removePanelClass(classes);\n\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n\n\n  getState() {\n    return this._state;\n  }\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n\n\n  _finishDialogClose() {\n    this._state = 2\n    /* MatDialogState.CLOSED */\n    ;\n\n    this._ref.close(this._result, {\n      focusOrigin: this._closeInteractionType\n    });\n\n    this.componentInstance = null;\n  }\n\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  ref._closeInteractionType = interactionType;\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n}; // Counter for unique dialog ids.\n\nlet uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nclass _MatDialogBase {\n  constructor(_overlay, injector, _defaultOptions, _parentDialog,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 15.0.0\n   */\n  _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  _animationMode) {\n    this._overlay = _overlay;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._idPrefix = 'mat-dialog-';\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n    this._dialog = injector.get(Dialog);\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n\n\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n  open(componentOrTemplateRef, config) {\n    let dialogRef;\n    config = { ...(this._defaultOptions || new MatDialogConfig()),\n      ...config\n    };\n    config.id = config.id || `${this._idPrefix}${uniqueId++}`;\n    config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n\n    const cdkRef = this._dialog.open(componentOrTemplateRef, { ...config,\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n      // Disable closing since we need to sync it up to the animation ourselves.\n      disableClose: true,\n      // Disable closing on destroy, because this service cleans up its open dialogs as well.\n      // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n      // the dialogs immediately whereas we want it to wait for the animations to finish.\n      closeOnDestroy: false,\n      container: {\n        type: this._dialogContainerType,\n        providers: () => [// Provide our config as the CDK config as well since it has the same interface as the\n        // CDK one, but it contains the actual values passed in by the user for things like\n        // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n        {\n          provide: MatDialogConfig,\n          useValue: config\n        }, {\n          provide: DialogConfig,\n          useValue: config\n        }]\n      },\n      templateContext: () => ({\n        dialogRef\n      }),\n      providers: (ref, cdkConfig, dialogContainer) => {\n        dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n        dialogRef.updatePosition(config?.position);\n        return [{\n          provide: this._dialogContainerType,\n          useValue: dialogContainer\n        }, {\n          provide: this._dialogDataToken,\n          useValue: cdkConfig.data\n        }, {\n          provide: this._dialogRefConstructor,\n          useValue: dialogRef\n        }];\n      }\n    }); // This can't be assigned in the `providers` callback, because\n    // the instance hasn't been assigned to the CDK ref yet.\n\n\n    dialogRef.componentInstance = cdkRef.componentInstance;\n    this.openDialogs.push(dialogRef);\n    this.afterOpened.next(dialogRef);\n    dialogRef.afterClosed().subscribe(() => {\n      const index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1);\n\n        if (!this.openDialogs.length) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    });\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n\n\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n\n\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n\n    this._afterAllClosedAtThisLevel.complete();\n\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  _closeDialogs(dialogs) {\n    let i = dialogs.length;\n\n    while (i--) {\n      dialogs[i].close();\n    }\n  }\n\n}\n\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatDialogBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _MatDialogBase,\n  factory: _MatDialogBase.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.InjectionToken\n    }, {\n      type: undefined\n    }];\n  }, null);\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nclass MatDialog extends _MatDialogBase {\n  constructor(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  _location, defaultOptions, scrollStrategy, parentDialog,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 15.0.0\n   */\n  overlayContainer,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  animationMode) {\n    super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n  }\n\n}\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(MatDialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nclass MatDialogClose {\n  constructor(\n  /**\n   * Reference to the containing dialog.\n   * @deprecated `dialogRef` property to become private.\n   * @breaking-change 13.0.0\n   */\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n\n    this.type = 'button';\n  }\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n\n  ngOnChanges(changes) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n\n}\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nclass MatDialogTitle {\n  constructor( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n\n}\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nclass MatDialogContent {}\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nclass MatDialogActions {\n  constructor() {\n    /**\n     * Horizontal alignment of action buttons.\n     */\n    this.align = 'start';\n  }\n\n}\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"],\n  hostVars: 4,\n  hostBindings: function MatDialogActions_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-dialog-actions-align-center\", ctx.align === \"center\")(\"mat-dialog-actions-align-end\", ctx.align === \"end\");\n    }\n  },\n  inputs: {\n    align: \"align\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-dialog-actions',\n        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n        '[class.mat-dialog-actions-align-end]': 'align === \"end\"'\n      }\n    }]\n  }], null, {\n    align: [{\n      type: Input\n    }]\n  });\n})(); // TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatDialogModule {}\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations };","map":{"version":3,"names":["CdkDialogContainer","Dialog","DialogConfig","DialogModule","i1$1","Overlay","OverlayModule","i4","PortalModule","i0","EventEmitter","Component","Optional","Inject","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injectable","SkipSelf","Directive","Input","NgModule","MatCommonModule","i2","DOCUMENT","Subject","merge","defer","filter","take","startWith","trigger","state","style","transition","group","animate","query","animateChild","i1","ESCAPE","hasModifierKey","ANIMATION_MODULE_TYPE","defaultParams","params","enterAnimationDuration","exitAnimationDuration","matDialogAnimations","dialogContainer","opacity","transform","optional","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","delayFocusTrap","closeOnNavigation","_MatDialogContainerBase","elementRef","focusTrapFactory","_document","dialogConfig","interactivityChecker","ngZone","overlayRef","focusMonitor","_animationStateChanged","_captureInitialFocus","_config","_trapFocus","_openAnimationDone","totalTime","next","ɵfac","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","OverlayRef","FocusMonitor","ɵcmp","type","args","template","undefined","decorators","MatDialogContainer","document","checker","_changeDetectorRef","_state","_onAnimationDone","toState","_onAnimationStart","_startExitAnimation","markForCheck","_getAnimationState","value","ChangeDetectorRef","CdkPortalOutlet","selector","encapsulation","None","changeDetection","Default","animations","host","styles","MatDialogRef","_ref","config","_containerInstance","_afterOpened","_beforeClosed","id","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","backdropClick","keydownEvents","keyCode","preventDefault","_closeDialogVia","close","dialogResult","detachBackdrop","setTimeout","afterOpened","afterClosed","closed","beforeClosed","updatePosition","position","strategy","positionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","focusOrigin","_closeInteractionType","componentInstance","ref","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","uniqueId","_MatDialogBase","_overlay","injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_animationMode","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_idPrefix","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","_dialog","get","parent","open","componentOrTemplateRef","dialogRef","cdkRef","global","closeOnDestroy","container","providers","useValue","templateContext","cdkConfig","push","index","indexOf","splice","closeAll","_closeDialogs","getDialogById","find","dialog","ngOnDestroy","dialogs","i","ɵprov","Injector","OverlayContainer","Type","MatDialog","_location","defaultOptions","parentDialog","overlayContainer","animationMode","Location","dialogElementUid","MatDialogClose","_elementRef","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","ɵdir","exportAs","_matDialogClose","MatDialogTitle","_dialogRef","Promise","resolve","then","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","nativeElement","parentElement","classList","contains","MatDialogModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/oussa/IdeaProjects/movies-platform-frontend/node_modules/@angular/material/fesm2020/dialog.mjs"],"sourcesContent":["import { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), defaultParams),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n        this.enterAnimationDuration = defaultParams.params.enterAnimationDuration;\n        /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n        this.exitAnimationDuration = defaultParams.params.exitAnimationDuration;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\nclass _MatDialogContainerBase extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\n_MatDialogContainerBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatDialogContainerBase, selector: \"ng-component\", usesInheritance: true, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Component,\n            args: [{ template: '' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }]; } });\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n        this._changeDetectorRef = _changeDetectorRef;\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._openAnimationDone(totalTime);\n        }\n        else if (toState === 'exit') {\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    _getAnimationState() {\n        return {\n            value: this._state,\n            params: {\n                'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n                'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration,\n            },\n        };\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_getAnimationState()\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i4.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': `_getAnimationState()`,\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* MatDialogState.OPEN */;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* MatDialogState.CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* MatDialogState.CLOSED */;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, injector, _defaultOptions, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._idPrefix = 'mat-dialog-';\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n        this._dialog = injector.get(Dialog);\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || `${this._idPrefix}${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: MatDialogConfig, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\n_MatDialogBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, defaultOptions, scrollStrategy, parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }]; }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n    constructor() {\n        /**\n         * Horizontal alignment of action buttons.\n         */\n        this.align = 'start';\n    }\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-dialog-actions',\n                        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}