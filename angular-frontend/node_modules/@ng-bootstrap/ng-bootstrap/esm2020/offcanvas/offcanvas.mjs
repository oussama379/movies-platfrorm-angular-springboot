import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./offcanvas-stack";
import * as i2 from "./offcanvas-config";
/**
 * A service for opening an offcanvas.
 *
 * Creating an offcanvas is straightforward: create a component or a template and pass it as an argument to
 * the `.open()` method.
 *
 * @since 12.1.0
 */
export class NgbOffcanvas {
    constructor(_injector, _offcanvasStack, _config) {
        this._injector = _injector;
        this._offcanvasStack = _offcanvasStack;
        this._config = _config;
    }
    /**
     * Opens a new offcanvas panel with the specified content and supplied options.
     *
     * Content can be provided as a `TemplateRef` or a component type. If you pass a component type as content,
     * then instances of those components can be injected with an instance of the `NgbActiveOffcanvas` class. You can then
     * use `NgbActiveOffcanvas` methods to close / dismiss offcanvas from "inside" of your component.
     *
     * Also see the [`NgbOffcanvasOptions`](#/components/offcanvas/api#NgbOffcanvasOptions) for the list of supported
     * options.
     */
    open(content, options = {}) {
        const combinedOptions = { ...this._config, animation: this._config.animation, ...options };
        return this._offcanvasStack.open(this._injector, content, combinedOptions);
    }
    /**
     * Returns an observable that holds the active offcanvas instance.
     */
    get activeInstance() { return this._offcanvasStack.activeInstance; }
    /**
     * Dismisses the currently displayed offcanvas with the supplied reason.
     */
    dismiss(reason) { this._offcanvasStack.dismiss(reason); }
    /**
     * Indicates if there is currently an open offcanvas in the application.
     */
    hasOpenOffcanvas() { return this._offcanvasStack.hasOpenOffcanvas(); }
}
NgbOffcanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: NgbOffcanvas, deps: [{ token: i0.Injector }, { token: i1.NgbOffcanvasStack }, { token: i2.NgbOffcanvasConfig }], target: i0.ɵɵFactoryTarget.Injectable });
NgbOffcanvas.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: NgbOffcanvas, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: NgbOffcanvas, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.NgbOffcanvasStack }, { type: i2.NgbOffcanvasConfig }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2ZmY2FudmFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL29mZmNhbnZhcy9vZmZjYW52YXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBVyxNQUFNLGVBQWUsQ0FBQzs7OztBQUtuRDs7Ozs7OztHQU9HO0FBRUgsTUFBTSxPQUFPLFlBQVk7SUFDdkIsWUFDWSxTQUFtQixFQUFVLGVBQWtDLEVBQVUsT0FBMkI7UUFBcEcsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQW9CO0lBQUcsQ0FBQztJQUVwSDs7Ozs7Ozs7O09BU0c7SUFDSCxJQUFJLENBQUMsT0FBWSxFQUFFLFVBQStCLEVBQUU7UUFDbEQsTUFBTSxlQUFlLEdBQUcsRUFBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsT0FBTyxFQUFDLENBQUM7UUFDekYsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLGNBQWMsS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUVwRTs7T0FFRztJQUNILE9BQU8sQ0FBQyxNQUFZLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRS9EOztPQUVHO0lBQ0gsZ0JBQWdCLEtBQWMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDOzt5R0FoQ3BFLFlBQVk7NkdBQVosWUFBWSxjQURBLE1BQU07MkZBQ2xCLFlBQVk7a0JBRHhCLFVBQVU7bUJBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBJbmplY3Rvcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nYk9mZmNhbnZhc0NvbmZpZywgTmdiT2ZmY2FudmFzT3B0aW9uc30gZnJvbSAnLi9vZmZjYW52YXMtY29uZmlnJztcbmltcG9ydCB7TmdiT2ZmY2FudmFzUmVmfSBmcm9tICcuL29mZmNhbnZhcy1yZWYnO1xuaW1wb3J0IHtOZ2JPZmZjYW52YXNTdGFja30gZnJvbSAnLi9vZmZjYW52YXMtc3RhY2snO1xuXG4vKipcbiAqIEEgc2VydmljZSBmb3Igb3BlbmluZyBhbiBvZmZjYW52YXMuXG4gKlxuICogQ3JlYXRpbmcgYW4gb2ZmY2FudmFzIGlzIHN0cmFpZ2h0Zm9yd2FyZDogY3JlYXRlIGEgY29tcG9uZW50IG9yIGEgdGVtcGxhdGUgYW5kIHBhc3MgaXQgYXMgYW4gYXJndW1lbnQgdG9cbiAqIHRoZSBgLm9wZW4oKWAgbWV0aG9kLlxuICpcbiAqIEBzaW5jZSAxMi4xLjBcbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTmdiT2ZmY2FudmFzIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgX29mZmNhbnZhc1N0YWNrOiBOZ2JPZmZjYW52YXNTdGFjaywgcHJpdmF0ZSBfY29uZmlnOiBOZ2JPZmZjYW52YXNDb25maWcpIHt9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgbmV3IG9mZmNhbnZhcyBwYW5lbCB3aXRoIHRoZSBzcGVjaWZpZWQgY29udGVudCBhbmQgc3VwcGxpZWQgb3B0aW9ucy5cbiAgICpcbiAgICogQ29udGVudCBjYW4gYmUgcHJvdmlkZWQgYXMgYSBgVGVtcGxhdGVSZWZgIG9yIGEgY29tcG9uZW50IHR5cGUuIElmIHlvdSBwYXNzIGEgY29tcG9uZW50IHR5cGUgYXMgY29udGVudCxcbiAgICogdGhlbiBpbnN0YW5jZXMgb2YgdGhvc2UgY29tcG9uZW50cyBjYW4gYmUgaW5qZWN0ZWQgd2l0aCBhbiBpbnN0YW5jZSBvZiB0aGUgYE5nYkFjdGl2ZU9mZmNhbnZhc2AgY2xhc3MuIFlvdSBjYW4gdGhlblxuICAgKiB1c2UgYE5nYkFjdGl2ZU9mZmNhbnZhc2AgbWV0aG9kcyB0byBjbG9zZSAvIGRpc21pc3Mgb2ZmY2FudmFzIGZyb20gXCJpbnNpZGVcIiBvZiB5b3VyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQWxzbyBzZWUgdGhlIFtgTmdiT2ZmY2FudmFzT3B0aW9uc2BdKCMvY29tcG9uZW50cy9vZmZjYW52YXMvYXBpI05nYk9mZmNhbnZhc09wdGlvbnMpIGZvciB0aGUgbGlzdCBvZiBzdXBwb3J0ZWRcbiAgICogb3B0aW9ucy5cbiAgICovXG4gIG9wZW4oY29udGVudDogYW55LCBvcHRpb25zOiBOZ2JPZmZjYW52YXNPcHRpb25zID0ge30pOiBOZ2JPZmZjYW52YXNSZWYge1xuICAgIGNvbnN0IGNvbWJpbmVkT3B0aW9ucyA9IHsuLi50aGlzLl9jb25maWcsIGFuaW1hdGlvbjogdGhpcy5fY29uZmlnLmFuaW1hdGlvbiwgLi4ub3B0aW9uc307XG4gICAgcmV0dXJuIHRoaXMuX29mZmNhbnZhc1N0YWNrLm9wZW4odGhpcy5faW5qZWN0b3IsIGNvbnRlbnQsIGNvbWJpbmVkT3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgaG9sZHMgdGhlIGFjdGl2ZSBvZmZjYW52YXMgaW5zdGFuY2UuXG4gICAqL1xuICBnZXQgYWN0aXZlSW5zdGFuY2UoKSB7IHJldHVybiB0aGlzLl9vZmZjYW52YXNTdGFjay5hY3RpdmVJbnN0YW5jZTsgfVxuXG4gIC8qKlxuICAgKiBEaXNtaXNzZXMgdGhlIGN1cnJlbnRseSBkaXNwbGF5ZWQgb2ZmY2FudmFzIHdpdGggdGhlIHN1cHBsaWVkIHJlYXNvbi5cbiAgICovXG4gIGRpc21pc3MocmVhc29uPzogYW55KSB7IHRoaXMuX29mZmNhbnZhc1N0YWNrLmRpc21pc3MocmVhc29uKTsgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlcmUgaXMgY3VycmVudGx5IGFuIG9wZW4gb2ZmY2FudmFzIGluIHRoZSBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGhhc09wZW5PZmZjYW52YXMoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9vZmZjYW52YXNTdGFjay5oYXNPcGVuT2ZmY2FudmFzKCk7IH1cbn1cbiJdfQ==